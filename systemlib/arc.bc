; ModuleID = './arc.c'
source_filename = "./arc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.class_Any = type { %struct.Standard_vTable, i32 }
%struct.Standard_vTable = type { i8*, i8*, void (i8*)*, i8* }

@.str = private unnamed_addr constant [59 x i8] c"\1B[36mARC \1B[0m- \1B[32mRegistered %s reference [%d] - %s\1B[0m\0A\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"\1B[36mARC \1B[0m- \1B[33mUnregistered %s reference [%d] - %s\1B[0m\0A\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"\1B[36mARC \1B[0m- \1B[31mDestroying %s instance - %s\1B[0m\0A\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"\1B[36mARC \1B[0m- \1B[0;35mWhat?? [%d] - %s\1B[0m\0A\00", align 1

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @arc_RegisterReference(%struct.class_Any* noundef %0) #0 {
  %2 = alloca %struct.class_Any*, align 8
  store %struct.class_Any* %0, %struct.class_Any** %2, align 8
  %3 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %4 = icmp eq %struct.class_Any* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  br label %11

6:                                                ; preds = %1
  %7 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %8 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %7, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %8, align 8
  br label %11

11:                                               ; preds = %6, %5
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @arc_UnregisterReference(%struct.class_Any* noundef %0) #0 {
  %2 = alloca %struct.class_Any*, align 8
  store %struct.class_Any* %0, %struct.class_Any** %2, align 8
  %3 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %4 = icmp eq %struct.class_Any* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  br label %24

6:                                                ; preds = %1
  %7 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %8 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %7, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* %8, align 8
  %11 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %12 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp sle i32 %13, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %6
  %16 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %17 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %17, i32 0, i32 2
  %19 = load void (i8*)*, void (i8*)** %18, align 8
  %20 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %21 = bitcast %struct.class_Any* %20 to i8*
  call void %19(i8* noundef %21)
  %22 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %23 = bitcast %struct.class_Any* %22 to i8*
  call void @free(i8* noundef %23) #3
  br label %24

24:                                               ; preds = %5, %15, %6
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* noundef) #1

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @arc_DestroyObject(%struct.class_Any* noundef %0) #0 {
  %2 = alloca %struct.class_Any*, align 8
  store %struct.class_Any* %0, %struct.class_Any** %2, align 8
  %3 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %4 = icmp eq %struct.class_Any* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  br label %15

6:                                                ; preds = %1
  %7 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %8 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %8, i32 0, i32 2
  %10 = load void (i8*)*, void (i8*)** %9, align 8
  %11 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %12 = bitcast %struct.class_Any* %11 to i8*
  call void %10(i8* noundef %12)
  %13 = load %struct.class_Any*, %struct.class_Any** %2, align 8
  %14 = bitcast %struct.class_Any* %13 to i8*
  call void @free(i8* noundef %14) #3
  br label %15

15:                                               ; preds = %6, %5
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @arc_RegisterReferenceVerbose(%struct.class_Any* noundef %0, i8* noundef %1) #0 {
  %3 = alloca %struct.class_Any*, align 8
  %4 = alloca i8*, align 8
  store %struct.class_Any* %0, %struct.class_Any** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %6 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %5, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  store i32 %8, i32* %6, align 8
  %9 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %10 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %14 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = load i8*, i8** %4, align 8
  %17 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i8* noundef %12, i32 noundef %15, i8* noundef %16)
  ret void
}

declare i32 @printf(i8* noundef, ...) #2

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @arc_UnregisterReferenceVerbose(%struct.class_Any* noundef %0, i8* noundef %1) #0 {
  %3 = alloca %struct.class_Any*, align 8
  %4 = alloca i8*, align 8
  store %struct.class_Any* %0, %struct.class_Any** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %6 = icmp eq %struct.class_Any* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  br label %53

8:                                                ; preds = %2
  %9 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %10 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, -1
  store i32 %12, i32* %10, align 8
  %13 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %14 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %14, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %18 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i8* noundef %16, i32 noundef %19, i8* noundef %20)
  %22 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %23 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %41

26:                                               ; preds = %8
  %27 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %28 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %27, i32 0, i32 0
  %29 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %28, i32 0, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = load i8*, i8** %4, align 8
  %32 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0), i8* noundef %30, i8* noundef %31)
  %33 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %34 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %33, i32 0, i32 0
  %35 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %34, i32 0, i32 2
  %36 = load void (i8*)*, void (i8*)** %35, align 8
  %37 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %38 = bitcast %struct.class_Any* %37 to i8*
  call void %36(i8* noundef %38)
  %39 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %40 = bitcast %struct.class_Any* %39 to i8*
  call void @free(i8* noundef %40) #3
  br label %53

41:                                               ; preds = %8
  %42 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %43 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %41
  %47 = load %struct.class_Any*, %struct.class_Any** %3, align 8
  %48 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %47, i32 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = load i8*, i8** %4, align 8
  %51 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i32 noundef %49, i8* noundef %50)
  br label %52

52:                                               ; preds = %46, %41
  br label %53

53:                                               ; preds = %7, %52, %26
  ret void
}

attributes #0 = { noinline nounwind optnone sspstrong uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 14.0.6"}
