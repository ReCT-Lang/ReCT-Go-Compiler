; ModuleID = './exceptions.c'
source_filename = "./exceptions.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.class_Any = type { %struct.Standard_vTable }
%struct.Standard_vTable = type { i8*, i8*, i8* }

@.str = private unnamed_addr constant [45 x i8] c"%s[RUNTIME] %sEncountered Exception! %s'%s'\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"\1B[1;31m\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"\1B[0;31m\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"%s[STACKTRACE] %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"\1B[1;33m\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"\1B[0;33m\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c".so\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c".dll\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.9 = private unnamed_addr constant [54 x i8] c"Null-Pointer exception! The given reference was null.\00", align 1
@.str.10 = private unnamed_addr constant [90 x i8] c"Conversion vTable for output type could not be found! This indicates a broken executable.\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Any\00", align 1
@.str.12 = private unnamed_addr constant [50 x i8] c"Object of type %s could not be casted to type %s!\00", align 1

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @exc_Throw(i8* noundef %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [128 x i8*], align 16
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* noundef %9)
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %12 = getelementptr inbounds [128 x i8*], [128 x i8*]* %3, i64 0, i64 0
  %13 = call i32 @backtrace(i8** noundef %12, i32 noundef 128)
  store i32 %13, i32* %4, align 4
  %14 = getelementptr inbounds [128 x i8*], [128 x i8*]* %3, i64 0, i64 0
  %15 = load i32, i32* %4, align 4
  %16 = call i8** @backtrace_symbols(i8** noundef %14, i32 noundef %15) #6
  store i8** %16, i8*** %5, align 8
  store i32 1, i32* %6, align 4
  br label %17

17:                                               ; preds = %48, %1
  %18 = load i32, i32* %6, align 4
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %51

21:                                               ; preds = %17
  %22 = load i8**, i8*** %5, align 8
  %23 = load i32, i32* %6, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8*, i8** %22, i64 %24
  %26 = load i8*, i8** %25, align 8
  %27 = call i8* @strstr(i8* noundef %26, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0)) #7
  store i8* %27, i8** %7, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = load i32, i32* %6, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8*, i8** %28, i64 %30
  %32 = load i8*, i8** %31, align 8
  %33 = call i8* @strstr(i8* noundef %32, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0)) #7
  store i8* %33, i8** %8, align 8
  %34 = load i8*, i8** %7, align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %21
  br label %51

37:                                               ; preds = %21
  %38 = load i8*, i8** %8, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  br label %51

41:                                               ; preds = %37
  %42 = load i8**, i8*** %5, align 8
  %43 = load i32, i32* %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* noundef %46)
  br label %48

48:                                               ; preds = %41
  %49 = load i32, i32* %6, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %6, align 4
  br label %17, !llvm.loop !6

51:                                               ; preds = %40, %36, %17
  %52 = load i8**, i8*** %5, align 8
  %53 = bitcast i8** %52 to i8*
  call void @free(i8* noundef %53) #6
  call void @exit(i32 noundef -1) #8
  unreachable
}

declare i32 @printf(i8* noundef, ...) #1

declare i32 @backtrace(i8** noundef, i32 noundef) #1

; Function Attrs: nounwind
declare i8** @backtrace_symbols(i8** noundef, i32 noundef) #2

; Function Attrs: nounwind readonly willreturn
declare i8* @strstr(i8* noundef, i8* noundef) #3

; Function Attrs: nounwind
declare void @free(i8* noundef) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #4

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @exc_ThrowIfNull(i8* noundef %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  call void @exc_Throw(i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0))
  br label %6

6:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @exc_ThrowIfInvalidCast(%struct.class_Any* noundef %0, %struct.Standard_vTable* noundef %1, i8* noundef %2) #0 {
  %4 = alloca %struct.class_Any*, align 8
  %5 = alloca %struct.Standard_vTable*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.Standard_vTable, align 8
  %8 = alloca %struct.Standard_vTable*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store %struct.class_Any* %0, %struct.class_Any** %4, align 8
  store %struct.Standard_vTable* %1, %struct.Standard_vTable** %5, align 8
  store i8* %2, i8** %6, align 8
  %12 = load %struct.class_Any*, %struct.class_Any** %4, align 8
  %13 = icmp eq %struct.class_Any* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  br label %139

15:                                               ; preds = %3
  %16 = load %struct.class_Any*, %struct.class_Any** %4, align 8
  %17 = getelementptr inbounds %struct.class_Any, %struct.class_Any* %16, i32 0, i32 0
  %18 = bitcast %struct.Standard_vTable* %7 to i8*
  %19 = bitcast %struct.Standard_vTable* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false)
  %20 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %21 = icmp eq %struct.Standard_vTable* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %15
  call void @exc_Throw(i8* noundef getelementptr inbounds ([90 x i8], [90 x i8]* @.str.10, i64 0, i64 0))
  br label %23

23:                                               ; preds = %22, %15
  %24 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 2
  %25 = load i8*, i8** %24, align 8
  %26 = load i8*, i8** %6, align 8
  %27 = call i32 @strcmp(i8* noundef %25, i8* noundef %26) #7
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %23
  br label %139

30:                                               ; preds = %23
  %31 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %32 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %31, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @strcmp(i8* noundef %33, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0)) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %30
  br label %139

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast i8* %39 to %struct.Standard_vTable*
  store %struct.Standard_vTable* %40, %struct.Standard_vTable** %8, align 8
  br label %41

41:                                               ; preds = %54, %37
  %42 = load %struct.Standard_vTable*, %struct.Standard_vTable** %8, align 8
  %43 = icmp ne %struct.Standard_vTable* %42, null
  br i1 %43, label %44, label %59

44:                                               ; preds = %41
  %45 = load %struct.Standard_vTable*, %struct.Standard_vTable** %8, align 8
  %46 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %45, i32 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %49 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %48, i32 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @strcmp(i8* noundef %47, i8* noundef %50) #7
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %44
  br label %139

54:                                               ; preds = %44
  %55 = load %struct.Standard_vTable*, %struct.Standard_vTable** %8, align 8
  %56 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %55, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = bitcast i8* %57 to %struct.Standard_vTable*
  store %struct.Standard_vTable* %58, %struct.Standard_vTable** %8, align 8
  br label %41, !llvm.loop !8

59:                                               ; preds = %41
  %60 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %61 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %60, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = bitcast i8* %62 to %struct.Standard_vTable*
  store %struct.Standard_vTable* %63, %struct.Standard_vTable** %8, align 8
  br label %64

64:                                               ; preds = %76, %59
  %65 = load %struct.Standard_vTable*, %struct.Standard_vTable** %8, align 8
  %66 = icmp ne %struct.Standard_vTable* %65, null
  br i1 %66, label %67, label %81

67:                                               ; preds = %64
  %68 = load %struct.Standard_vTable*, %struct.Standard_vTable** %8, align 8
  %69 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %68, i32 0, i32 1
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 1
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @strcmp(i8* noundef %70, i8* noundef %72) #7
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %67
  br label %139

76:                                               ; preds = %67
  %77 = load %struct.Standard_vTable*, %struct.Standard_vTable** %8, align 8
  %78 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %77, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = bitcast i8* %79 to %struct.Standard_vTable*
  store %struct.Standard_vTable* %80, %struct.Standard_vTable** %8, align 8
  br label %64, !llvm.loop !9

81:                                               ; preds = %64
  %82 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %85 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %84, i32 0, i32 1
  %86 = load i8*, i8** %85, align 8
  %87 = call i32 @strcmp(i8* noundef %83, i8* noundef %86) #7
  %88 = icmp eq i32 %87, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %9, align 1
  store i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i64 0, i64 0), i8** %10, align 8
  %90 = load i8*, i8** %10, align 8
  %91 = load i8, i8* %9, align 1
  %92 = trunc i8 %91 to i1
  br i1 %92, label %93, label %96

93:                                               ; preds = %81
  %94 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 2
  %95 = load i8*, i8** %94, align 8
  br label %99

96:                                               ; preds = %81
  %97 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 1
  %98 = load i8*, i8** %97, align 8
  br label %99

99:                                               ; preds = %96, %93
  %100 = phi i8* [ %95, %93 ], [ %98, %96 ]
  %101 = load i8, i8* %9, align 1
  %102 = trunc i8 %101 to i1
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = load i8*, i8** %6, align 8
  br label %109

105:                                              ; preds = %99
  %106 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %107 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %106, i32 0, i32 1
  %108 = load i8*, i8** %107, align 8
  br label %109

109:                                              ; preds = %105, %103
  %110 = phi i8* [ %104, %103 ], [ %108, %105 ]
  %111 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* noundef null, i64 noundef 0, i8* noundef %90, i8* noundef %100, i8* noundef %110) #6
  %112 = add nsw i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = call noalias i8* @malloc(i64 noundef %113) #6
  store i8* %114, i8** %11, align 8
  %115 = load i8*, i8** %11, align 8
  %116 = load i8*, i8** %10, align 8
  %117 = load i8, i8* %9, align 1
  %118 = trunc i8 %117 to i1
  br i1 %118, label %119, label %122

119:                                              ; preds = %109
  %120 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 2
  %121 = load i8*, i8** %120, align 8
  br label %125

122:                                              ; preds = %109
  %123 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %7, i32 0, i32 1
  %124 = load i8*, i8** %123, align 8
  br label %125

125:                                              ; preds = %122, %119
  %126 = phi i8* [ %121, %119 ], [ %124, %122 ]
  %127 = load i8, i8* %9, align 1
  %128 = trunc i8 %127 to i1
  br i1 %128, label %129, label %131

129:                                              ; preds = %125
  %130 = load i8*, i8** %6, align 8
  br label %135

131:                                              ; preds = %125
  %132 = load %struct.Standard_vTable*, %struct.Standard_vTable** %5, align 8
  %133 = getelementptr inbounds %struct.Standard_vTable, %struct.Standard_vTable* %132, i32 0, i32 1
  %134 = load i8*, i8** %133, align 8
  br label %135

135:                                              ; preds = %131, %129
  %136 = phi i8* [ %130, %129 ], [ %134, %131 ]
  %137 = call i32 (i8*, i8*, ...) @sprintf(i8* noundef %115, i8* noundef %116, i8* noundef %126, i8* noundef %136) #6
  %138 = load i8*, i8** %11, align 8
  call void @exc_Throw(i8* noundef %138)
  br label %139

139:                                              ; preds = %135, %75, %53, %36, %29, %14
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind readonly willreturn
declare i32 @strcmp(i8* noundef, i8* noundef) #3

; Function Attrs: nounwind
declare noalias i8* @malloc(i64 noundef) #2

; Function Attrs: nounwind
declare i32 @snprintf(i8* noundef, i64 noundef, i8* noundef, ...) #2

; Function Attrs: nounwind
declare i32 @sprintf(i8* noundef, i8* noundef, ...) #2

attributes #0 = { noinline nounwind optnone sspstrong uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly nofree nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly willreturn }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 14.0.6"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
